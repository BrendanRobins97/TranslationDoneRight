# Version Update Process

## Overview
This document outlines the process for updating the package version, maintaining the changelog, and managing git tags. Follow these steps carefully to ensure proper version management.

## Prerequisites
- Git installed and configured
- Access to the repository
- Unity project with the package

## Location
All commands should be run from the package root directory:
```powershell
cd "Assets/Translations Done Right"
```

## Steps

### 1. Check Current Status
```powershell
# Ensure you're on the main branch
git checkout main

# Get latest changes
git pull origin main

# Check current version tag
git describe --tags --abbrev=0
```

### 2. Gather Changes
```powershell
# Get commits since last tag
$LAST_TAG = git describe --tags --abbrev=0
git log $LAST_TAG..HEAD --pretty=format:"%s" | Out-File -FilePath "temp_changes.txt"
```

### 3. Update Version Numbers
1. Open `package.json`
2. Update the "version" field following semver:
   - MAJOR: Breaking changes (x.0.0)
   - MINOR: New features (0.x.0)
   - PATCH: Bug fixes (0.0.x)
   - Development: Start with 0.x.x

### 4. Update Changelog
1. Open `CHANGELOG.md`
2. Move [Unreleased] changes to new version section
3. Add new version header with today's date:
   ```markdown
   ## [X.Y.Z] - YYYY-MM-DD
   ```
4. Categorize changes under:
   - Added
   - Changed
   - Deprecated
   - Removed
   - Fixed
   - Security

5. Update comparison links at bottom:
   ```markdown
   [Unreleased]: https://github.com/BrendanRobins97/TranslationDoneRight/compare/vX.Y.Z...HEAD
   [X.Y.Z]: https://github.com/BrendanRobins97/TranslationDoneRight/compare/vA.B.C...vX.Y.Z
   ```

### 5. Commit Changes
```powershell
# Stage changes
git add package.json
git add CHANGELOG.md

# Commit with conventional commit message
git commit -m "chore(release): prepare version X.Y.Z"
```

### 6. Create Tag
```powershell
# Create annotated tag
git tag -a vX.Y.Z -m "Version X.Y.Z"
```

### 7. Push Changes
```powershell
# Push commits and tag
git push origin main
git push origin vX.Y.Z
```

## Example
```powershell
# Starting from package root
cd "Assets/Translations Done Right"

# Get latest changes
git checkout main
git pull origin main

# Update files (manually)
# - Update package.json version to "0.2.0"
# - Update CHANGELOG.md

# Commit and tag
git add package.json CHANGELOG.md
git commit -m "chore(release): prepare version 0.2.0"
git tag -a v0.2.0 -m "Version 0.2.0"

# Push
git push origin main
git push origin v0.2.0
```

## Troubleshooting

### PowerShell Issues
If encountering PowerShell command issues:
1. Use simple commit messages without special characters
2. Split complex commands into separate lines
3. Use `Write-Output` instead of echo
4. Avoid using `&&` operator, use separate commands

### Git Issues
1. If tag already exists:
   ```powershell
   git tag -d vX.Y.Z
   git push origin :refs/tags/vX.Y.Z
   ```

2. If push fails:
   ```powershell
   git pull --rebase origin main
   ```

## Notes
- Always use PowerShell commands as shown (not bash syntax)
- Keep commit messages simple to avoid PowerShell parsing issues
- Run commands from package root directory
- Verify changes in Unity before pushing
- Consider using Unity Package Manager version verification
- Test package update detection after pushing 